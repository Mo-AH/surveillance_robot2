<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md__r_e_a_d_m_e" kind="page">
    <compoundname>md_README</compoundname>
    <title>Surveillance Robot 2</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><bold>Second Assignment of Experimental Robotic Laboratory - Robotics Engineering - UniGE</bold></para>
<para>This repository contains the development of a ROS-based simulation of a robot model (a vehicle equipped with a laserscan sensor and a camera arm on top), designed for indoor surveillance operations. It is the second release of the <ulink url="https://github.com/Mo-AH/surveillance_robot">Surveillance Robot</ulink> simulation.</para>
<para>The full documentation can be found <ulink url="https://Mo-AH.github.io/surveillance_robot2/">here</ulink>.</para>
<para><hruler/>
</para>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md2">
<title>Scenario</title>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md3">
<title>Environment</title>
<para>In this assignment, we are considering an indoor environment made of 4 rooms and 3 corridors, shown in the figure. The robot starts in an additional room attached to the corridor <computeroutput>E</computeroutput>, where there are 7 <computeroutput>ArucoMarkers</computeroutput> embedding the map informations.</para>
<para><image type="html" name="########################" inline="yes"></image>
</para>
<para>The indoor environment is composed of locations and doors.<itemizedlist>
<listitem><para>A room is a location with just one door</para>
</listitem><listitem><para>A corridor is a location with 2 or more doors</para>
</listitem><listitem><para>If two locations have the same door, they are connected and the robot can move from one to the other</para>
</listitem><listitem><para>If a room has not been visited for some time (parameter <computeroutput>urgencyThreshold</computeroutput>), it becomes urgent</para>
</listitem></itemizedlist>
</para>
<para>For the environment representation, it has been used the <ulink url="https://github.com/buoncubi/topological_map">topological_map</ulink> ontology, which was previously created with Proteg√©. In particular, the <ulink url="https://github.com/Mo-AH/surveillance_robot2/tree/main/ontologies">file</ulink> used in this software is completely without the Abox.</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md5">
<title>Assumptions and Behaviour</title>
<para>The robot behaviour can be devided into two phases:</para>
<para><itemizedlist>
<listitem><para>Phase 1:<itemizedlist>
<listitem><para>The robot spawns in his starting location.</para>
</listitem><listitem><para>The robot move the arm (that has a camera attached on the end-effector) searching for markers to retrieve the environment informations.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Phase 2:<itemizedlist>
<listitem><para>The robot moves in a new location and checks it by rotating the arm before to visit another location. (This behavior is repeated in a infinite loop).</para>
</listitem><listitem><para>If the battery get low, it leave the task it was doing to reach the charging location and waits some time to recharge.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para>Moreover, when robot&apos;s battery is not low, it should move among locations with 2 basic rules:<itemizedlist>
<listitem><para>It should mainly stay on corridors.</para>
</listitem><listitem><para>If a reachable room has not been visited for some time, it becomes <computeroutput>URGENT</computeroutput> and it should be visited.</para>
</listitem></itemizedlist>
</para>
<para>There are a lot of ways for achieving a surveillance behaviour and a set of assumptions should be made:<itemizedlist>
<listitem><para>The environment does not change in time.</para>
</listitem><listitem><para>The robot can move only to locations connected to the current location.</para>
</listitem><listitem><para>The only location that the robot can always reach is the recharging one.</para>
</listitem><listitem><para>Only the rooms can become urgent.</para>
</listitem><listitem><para>The battery can become low at any time.</para>
</listitem></itemizedlist>
</para>
<para>After having retrieved the informations to build the map, it starts in a loop the phase 2 of the simulation, which can be modeled in a several ways depending on further specifications (e.g. all the locations should be urgent or maybe even the charging location should be be visited normally). The behaviour implemented in this repository follows the policy described in this pseudocode:</para>
<para><programlisting><codeline><highlight class="normal">#<sp/>[1]<sp/>Surveillance<sp/>policy:</highlight></codeline>
<codeline><highlight class="normal">if<sp/>there<sp/>are<sp/>urgent<sp/>rooms<sp/>reachable:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>move<sp/>to<sp/>the<sp/>most<sp/>urgent</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>check<sp/>the<sp/>room</highlight></codeline>
<codeline><highlight class="normal">else:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>move<sp/>to<sp/>a<sp/>corridor</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>[0]<sp/>Battery<sp/>checking:</highlight></codeline>
<codeline><highlight class="normal">if<sp/>battery<sp/>is<sp/>low:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>move<sp/>to<sp/>charging<sp/>location</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>recharge</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>start<sp/>again<sp/>from<sp/>[1]</highlight></codeline>
</programlisting></para>
<para>Note that, while performing <computeroutput>[1]</computeroutput> , it is always aware of the battery level. Moreover, if the battery is low, the <computeroutput>[0]</computeroutput> algorithm cancels the task it was doing.</para>
<para><hruler/>
</para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md7">
<title>Software Architecture</title>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md8">
<title>Components diagram</title>
<para>The connections among the nodes are described in the following image.</para>
<para><image type="html" name="203868060-07eac4a6-41d4-48bb-b6a8-51ac289e9a0c.png" inline="yes"></image>
</para>
<para>We can see how the <computeroutput><ref refid="namespacesmach__robot" kindref="compound">smach_robot</ref></computeroutput>, which implements the behaviour of the robot using a state machine, is the central entity of the entire architecture and is better described after, in the states diagram. Taking apart the <computeroutput>ARMOR Server</computeroutput>, which is used by <computeroutput><ref refid="namespacesmach__robot" kindref="compound">smach_robot</ref></computeroutput> to update and reason about the ontology, the other nodes simulate specific components of the robot:</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="namespacerobot__state" kindref="compound">robot_state</ref></computeroutput>: node in charge of managing the battery level. It provides a publisher for the battery level (<computeroutput>Bool.msg</computeroutput>) and a service to recharge the battery (<computeroutput>SetBool.srv</computeroutput>).</para>
</listitem><listitem><para><computeroutput>marker_detector</computeroutput>: node in charge of providing the room informations to build the map. It subscribes to the topic <computeroutput>/robot/camera/image_raw</computeroutput> to get the camera images, detect the markers IDs, asks for the embedded information to the <computeroutput>/room_info</computeroutput> service and publishes the room infos in the <computeroutput>/map/rooms</computeroutput> topic. When it has found all the markers, its job is done and so it shutdown.</para>
</listitem><listitem><para><computeroutput>marker_server</computeroutput>: node that implements a service: it requires the <computeroutput>id</computeroutput> (marker) detected by the robot and it replies with the information about the corresponding room (name of the room, coordinates of the center, connections with other rooms).</para>
</listitem><listitem><para><computeroutput><ref refid="namespacearm__controller" kindref="compound">arm_controller</ref></computeroutput>: node in charge of controlling the robotic arm. Given a <computeroutput>movement_cmd</computeroutput>, it follows the trajectory poses for that movement. For doing so, it implements an Action Server that uses the custom action <computeroutput>ArmControl.action</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md10">
<title>Sequence diagram</title>
<para><image type="html" name="203868067-1aaa2c30-93bb-4eab-866e-c3edf35ddefa.png" inline="yes"></image>
</para>
<para>This diagram represents the sequential flow of the architecture.</para>
<para>In particular, it shows that the nodes always active are <computeroutput><ref refid="namespacesmach__robot" kindref="compound">smach_robot</ref></computeroutput>, expectable as it is the central entity that calls the other components, and the <computeroutput><ref refid="namespacerobot__state" kindref="compound">robot_state</ref></computeroutput>, because it always keeps track of the battery level.</para>
<para>Apart from <computeroutput>marker_detector</computeroutput>, which shutdown once finished the trasmission of rooms informations, the other nodes are active only when the <computeroutput><ref refid="namespacesmach__robot" kindref="compound">smach_robot</ref></computeroutput> call them:</para>
<para><itemizedlist>
<listitem><para><computeroutput>marker_server</computeroutput>: when the robot has to scan the initial room to retrieve markers info. After that, in principle it could be shutdown as <computeroutput>marker_detector</computeroutput>, given that it won&apos;t be used anymore.</para>
</listitem><listitem><para><computeroutput>ARMOR Server</computeroutput>: initially, when we are defining the ontology objects and properties (Abox); later after every location change of the robot and to query about urgent/reachable rooms.</para>
</listitem><listitem><para><computeroutput><ref refid="namespacearm__controller" kindref="compound">arm_controller</ref></computeroutput>: when the robot has to scan the initial room and when it has to check a room.</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md12">
<title>States diagram</title>
<para><image type="html" name="203871623-20364fd2-2646-4bc9-aca6-3f416d9bb0f7.png" inline="yes"></image>
</para>
<para>In this diagram is shown the robot behaviour, implemented through a state machine in the <computeroutput><ref refid="namespacesmach__robot" kindref="compound">smach_robot</ref></computeroutput> node. The node relies on the use of <computeroutput><ref refid="namespacesmach__helper" kindref="compound">smach_helper</ref></computeroutput> module, which decouples the state machine interface from the computations processes.</para>
<para>After having built the map in the <computeroutput>BUILD MAP</computeroutput> state, it passes to the loop of the Phase 2:<itemizedlist>
<listitem><para><computeroutput>REASONER</computeroutput> : queries the ontology about reachable and urgent locations to decide the next location. If the battery is low, the next location is always the charging one.</para>
</listitem><listitem><para><computeroutput>MOVE</computeroutput>: it moves the robot to the target location. When it has reached the location, it uploads the ontology. When the motion is finished (i.e. it reached the target location) by the <computeroutput>MOVE</computeroutput> node, there are 3 possible transitions:<itemizedlist>
<listitem><para><computeroutput>location_urgent_reached</computeroutput>: the location should be checked and so it passes to the <computeroutput>CHECK_LOCATION</computeroutput> state.</para>
</listitem><listitem><para><computeroutput>location_not_urgent_reached</computeroutput>: the location shouldn&apos;t be checked so it passes to the <computeroutput>REASONER</computeroutput> state to decide next location.</para>
</listitem><listitem><para><computeroutput>charging_location_reached</computeroutput>: the robot has reached the charging location so it passes to the <computeroutput>CHARGE</computeroutput> state to recharge the battery.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>CHECK_LOCATION</computeroutput>: it checks the room by doing a full rotation of the arm base.</para>
</listitem><listitem><para><computeroutput>CHARGE</computeroutput>: it simply simulate the battery charging by wasting time.</para>
</listitem></itemizedlist>
</para>
<para>Note that, except for the <computeroutput>CHARGE</computeroutput> state, all other states pass to the <computeroutput>REASONER</computeroutput> when the battery is low (<computeroutput>battery_low</computeroutput> transition), leaving their task uncompleted.</para>
<para><hruler/>
</para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md14">
<title>Repository Structure</title>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md15">
<title>Package files</title>
<para>This repository contains a ROS package named <computeroutput>surveillance_robot</computeroutput> that, besides this README, includes the following resources.<itemizedlist>
<listitem><para><ulink url="CMakeList.txt">CMakeList.txt</ulink>: File to configure this package.</para>
</listitem><listitem><para><ulink url="package.xml">package.xml</ulink>: File to configure this package.</para>
</listitem><listitem><para><ulink url="setup.py">setup.py</ulink>: File to <computeroutput>import</computeroutput> python modules from the <computeroutput>utilities</computeroutput> folder into the files in the <computeroutput>script</computeroutput> folder.</para>
</listitem><listitem><para><ulink url="launcher/">launcher/</ulink>: Contains the configurations to launch this package.<itemizedlist>
<listitem><para><ulink url="launcher/armor.launch">armor.launch</ulink>: It launches the Armor server.</para>
</listitem><listitem><para><ulink url="launcher/gazebo_rviz.launch">gazebo_rviz.launch</ulink>: It launches the simulation with the robot model both in rviz and in gazebo.</para>
</listitem><listitem><para><ulink url="launcher/gmapping_movebase.launch">gmapping_movebase.launch</ulink>: It launches the SLAM Gmapping and the MoveBase nodes.</para>
</listitem><listitem><para><ulink url="launcher/random_battery.launch">assignment.launch</ulink>: It launches this package with a random-based change of battery state.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="msg/">msg/</ulink>: It contains the custom message exchanged through ROS topics.<itemizedlist>
<listitem><para><ulink url="msg/Room.msg">Room.msg</ulink>: It represents the informations about the room. (name, coordinates, connections)</para>
</listitem><listitem><para><ulink url="msg/RoomConnection.msg">RoomConnection.msg</ulink>: It is the message representing a connection among a door and a location.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="srv/">srv/</ulink>: It Contains the definition of each server used by this software.<itemizedlist>
<listitem><para><ulink url="srv/RoomInformation.srv">RoomInformation.srv</ulink>: It defines the request and response to get the room information given a marker id.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="action/">action/</ulink>: It contains the definition of each action server used by this software.<itemizedlist>
<listitem><para><ulink url="action/Control.action">ArmControl.action</ulink>: It defines the goal, feedback and results concerning arm motion controlling.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="scripts/">scripts/</ulink>: It contains the implementation of the python nodes.<itemizedlist>
<listitem><para><ulink url="scripts/map_builder.py">arm_controller.py</ulink>: It implements the action server to move the arm in some predefined trajectory.</para>
</listitem><listitem><para><ulink url="scripts/gesture.py">smach_robot.py</ulink>: It implements the state machine of the robot.</para>
</listitem><listitem><para><ulink url="scripts/robot_state.py">robot_state.py</ulink>: It implements the battery manager of the robot.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="src/">src/</ulink>: It contains the implementation of the c++ nodes.<itemizedlist>
<listitem><para><ulink url="src/marker_detector.cpp">marker_detector.cpp</ulink>: It implements the node to detect markers.</para>
</listitem><listitem><para><ulink url="src/marker_server.cpp">marker_server.cpp</ulink>: It implements the service to get markers informations.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="utilities/surveillance_robot2/">utilities/surveillance_robot2/</ulink>: It contains auxiliary python files, which are exploited by the files in the <computeroutput>scripts</computeroutput> folder.<itemizedlist>
<listitem><para><ulink url="scripts/architecture_name_mapper.py">architecture_name_mapper.py</ulink>: It contains the name of some <emphasis>node</emphasis>, <emphasis>topic</emphasis>, <emphasis>server</emphasis>, <emphasis>actions</emphasis> and <emphasis>parameters</emphasis> used in this architecture.</para>
</listitem><listitem><para><ulink url="scripts/action_client_helper.py">action_client_helper.py</ulink>: It defines a class to simplify the interaction with an action server.</para>
</listitem><listitem><para><ulink url="scripts/smach_helper.py">smach_helper.py</ulink>: It defines a class to simplify state machine computations.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="world/">worlds/</ulink>: It contains the assignment world.</para>
</listitem><listitem><para><ulink url="urdf/">urdf/</ulink>: It contains the robot model.</para>
</listitem><listitem><para><ulink url="docs/">docs/</ulink>: It contains the documentation of the repository.</para>
</listitem><listitem><para><ulink url="ontologies/">ontologies/</ulink>: It contains the ontology used in this software.</para>
</listitem><listitem><para><ulink url="config/">config/</ulink>: It contains the motors and rviz configuration files.</para>
</listitem><listitem><para><ulink url="param/">param/</ulink>: It contains the files to configure MoveBase.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md16">
<title>Further specifications on ROS Custom Messages, Services and Actions</title>
<para>For the development of the simulation, some custom <computeroutput>msg</computeroutput>, <computeroutput>srv</computeroutput> and <computeroutput>action</computeroutput> have been created:<itemizedlist>
<listitem><para><computeroutput>Room.msg</computeroutput>: it represents a room, with name, coordinates and connections.</para>
</listitem><listitem><para><computeroutput>RoomConnection.msg</computeroutput>: it represents a connection between a door and a location and is composed of two <computeroutput>string</computeroutput> objects.</para>
</listitem><listitem><para><computeroutput>RoomInformations.srv</computeroutput>: a service to get the rooms information embedded in a marker ID.</para>
</listitem><listitem><para><computeroutput>ArmControl.action</computeroutput>: an action to interact with the <computeroutput><ref refid="namespacearm__controller" kindref="compound">arm_controller</ref></computeroutput> action server.<itemizedlist>
<listitem><para><emphasis>goal</emphasis>: the movement command among some predefined.</para>
</listitem><listitem><para><emphasis>result</emphasis>: the final pose reached by the arm.</para>
</listitem><listitem><para><emphasis>feedback</emphasis>: the current pose reached by the arm.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md17">
<title>Dependencies</title>
<para>This software is developed with a <ulink url="http://wiki.ros.org/noetic">ROS Noetic</ulink> environment and you need to have a ROS workspace initialized in order to run the simulation. Moreover you should have installed:<itemizedlist>
<listitem><para><ulink url="http://wiki.ros.org/roslaunch">roslaunch</ulink>, to launch the package.</para>
</listitem><listitem><para><ulink url="http://wiki.ros.org/rospy">rospy</ulink>, to use python with ROS.</para>
</listitem><listitem><para><ulink url="http://wiki.ros.org/actionlib/DetailedDescription">actionlib</ulink>, to define <ulink url="http://docs.ros.org/en/jade/api/actionlib/html/classactionlib_1_1simple__action__server_1_1SimpleActionServer.html#a2013e3b4a6a3cb0b77bb31403e26f137">SimpleActionServer</ulink> and use <ulink url="https://docs.ros.org/en/api/actionlib/html/classactionlib_1_1simple__action__client_1_1SimpleActionClient.html">SimpleActionClient</ulink>.</para>
</listitem><listitem><para><ulink url="https://github.com/EmaroLab/armor">ARMOR Server</ulink>, a ROS integration to manipulate online OWL ontologies, which can be installed by following the instructions in the README.</para>
</listitem><listitem><para><ulink url="https://github.com/EmaroLab/armor_py_api">armor_py_api</ulink>, a library to simplify the python calls to the ARMOR Server, which can be installed by following the instructions in the README.</para>
</listitem><listitem><para><ulink url="https://wiki.archlinux.org/title/Xterm">xterm</ulink>, a terminal simulator, which can be installed by running from the terminal <computeroutput>sudo apt install -y xterm</computeroutput>.</para>
</listitem><listitem><para><ulink url="http://wiki.ros.org/smach">smach</ulink>, a state machine library to simulate the robot behaviour, which can be installed by running from the terminal <computeroutput>sudo apt-get install ros-noetic-smach-ros</computeroutput></para>
</listitem><listitem><para>[]</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md19">
<title>Simulation</title>
<sect3 id="md__r_e_a_d_m_e_1autotoc_md20">
<title>How to Run</title>
<para>Once assured that all dependecies are installed, follow those steps:<orderedlist>
<listitem><para>In the <computeroutput>src</computeroutput> folder of your ROS workspace, clone this repository by running <computeroutput>git clone <ulink url="https://github.com/Mo-AH/surveillance_robot2">https://github.com/Mo-AH/surveillance_robot2</ulink></computeroutput></para>
</listitem><listitem><para>Move first to <computeroutput>src/surveillance_robot2/scripts</computeroutput> and then to <computeroutput>src/surveillance_robot2/utilities/surveillance_robot2</computeroutput> and run a <computeroutput>chmod +x &lt;script_name&gt;.py</computeroutput> for each Python module in both folders.</para>
</listitem><listitem><para>Build the ROS workspace by running <computeroutput>catkin_make</computeroutput> in its root folder.</para>
</listitem><listitem><para>Launch the simulation:<itemizedlist>
<listitem><para>In a terminal, launch the ARMOR server by typing <computeroutput>roslaunch surveillance_robot2 armor.launch</computeroutput>.</para>
</listitem><listitem><para>In another terminal, launch all the package components by running <computeroutput>roslaunch surveillance_robot2 assignment.launch</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem></orderedlist>
</para>
<para><emphasis><bold>Note: This is due to a problem with Armor, which doesn&apos;t work well if launched together with the other components</bold></emphasis></para>
<para><hruler/>
</para>
</sect3>
<sect3 id="md__r_e_a_d_m_e_1autotoc_md22">
<title>Parameters</title>
<para>There are some parameters that are setted by default, but they can be changed to meet some specification:</para>
<para><itemizedlist>
<listitem><para><computeroutput>test/random_sense/active</computeroutput>: It is a boolean value that defines the battery mode: True for randomly change the state, False to change the state manually.</para>
</listitem><listitem><para><computeroutput>test/random_sense/battery_time</computeroutput>: It indicates the time passed within battery state changes (i.e., low/high). It should be a list of two float numbers, i.e., <computeroutput>[min_time, max_time]</computeroutput> in seconds, and the time passed between changes in battery levels will be a random value within such an interval.</para>
</listitem><listitem><para><computeroutput>test/charging_time</computeroutput>: It indicates the time required to recharge the battery, should be a float number.</para>
</listitem><listitem><para><computeroutput>map/total_markers</computeroutput>: It indicates the total markers to be found in the initial room.</para>
</listitem></itemizedlist>
</para>
<para>Other parameters regarding the ontology, such as starting location, charging location or connections list, can be changed directly in the <computeroutput>architecture_name_mapper.py</computeroutput> module.</para>
<para><hruler/>
</para>
</sect3>
<sect3 id="md__r_e_a_d_m_e_1autotoc_md24">
<title>Running code</title>
</sect3>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md25">
<title>VIDEO</title>
<para>In the video, there is the demonstration of the running code. It shows the initial phase in which the robot does a complete scan of the room, detecting markers, for building the map informations. After that, it starts moving following the surveillance policy. On the rviz window in the second part of the video, is shown the map building process of the SLAM Gmapping.</para>
<para><hruler/>
</para>
<sect3 id="md__r_e_a_d_m_e_1autotoc_md27">
<title>Possible improvements</title>
<para>Most of the system limitations are caused by the simulation nature of the software. For example, the planner and controller are implemented in a dummy way: the plan is computed with random points and the motion is only simulated, without having a real effect. Also, the map building is simulated by providing the connections between door and locations in a parameter before launching the software (<computeroutput>CONNECTION_LIST</computeroutput> variable in <computeroutput>architecture_name_mapper.py</computeroutput>).</para>
<para>It could be improved in several ways:<itemizedlist>
<listitem><para>It may be more appropriate pass directly to the planner with the charging location as target, instead of passing by the reasoner.</para>
</listitem><listitem><para>Implement a GUI interface to insert manually connections between location and doors.</para>
</listitem><listitem><para>Making the robot aware of the urgents rooms not adjacent and, hence, implement a real planning algorithm that detect the best locations-path to follow for reaching such rooms.</para>
</listitem><listitem><para>In the same way of the previous point, follow a locations-path when the recharging room is not adjacent.</para>
</listitem><listitem><para>Implement a real battery management, so that it runs out proportionally to the number of motions and to the time passed.</para>
</listitem><listitem><para>Implement the possibility of having multiple robots that cooperate together for the surveillance purpose.</para>
</listitem><listitem><para>When checking a room, do something instead of just wasting time, for example look around for markers.</para>
</listitem><listitem><para>When interrupting a task because of the battery low, memorize and continue it after having recharged the battery.</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect3>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md29">
<title>Credits</title>
<para>This package has been created starting from the <ulink url="https://github.com/Mo-AH/surveillance_robot">Surveillance Robot package</ulink>, that has been developed starting from the <ulink url="https://github.com/buoncubi/arch_skeleton">arch_skeleton</ulink> repository, created by prof. Luca Buoncompagni. In particular, the python modules that has been used are:<itemizedlist>
<listitem><para><computeroutput><ref refid="namespacerobot__state" kindref="compound">robot_state</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="namespaceaction__client__helper" kindref="compound">action_client_helper</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para><emphasis><bold>Author</bold></emphasis>: Mohammad Al Horany</para>
<para><emphasis><bold>Email</bold></emphasis>: <ulink url="mailto:s5271212@studenti.unige.it">s5271212@studenti.unige.it</ulink> </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
